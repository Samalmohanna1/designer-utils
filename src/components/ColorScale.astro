---
const shades = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900]
---

<div class='grid grid-cols-1 sm:grid-cols-5 md:grid-cols-10 gap-4'>
	{
		shades.map((shade) => (
			<div class='flex flex-col items-center'>
				<div
					class='w-full h-20 rounded color-scale-item border-2 border-slate-400'
					data-shade={shade}
				/>
				<span class='mt-2'>{shade}</span>
			</div>
		))
	}
</div>

<script>
	function calculateMixPercentage(shade: number): number {
		// 500 is our base color (0% mix)
		// 50 is the lightest (90% white mix)
		// 900 is the darkest (40% black mix)
		if (shade <= 500) {
			return 90 - ((shade - 50) / 450) * 90
		} else {
			return ((shade - 500) / 400) * 40
		}
	}

	function updateColorScale() {
		const baseColor = getComputedStyle(document.documentElement)
			.getPropertyValue('--base-color')
			.trim()
		const items = document.querySelectorAll('.color-scale-item')

		items.forEach((item) => {
			const shade = parseInt(item.getAttribute('data-shade') || '500')
			const mixPercentage = calculateMixPercentage(shade)
			const mixColor = shade < 500 ? 'white' : 'black'

			;(item as HTMLElement).style.backgroundColor =
				`color-mix(in srgb, ${baseColor} ${100 - mixPercentage}%, ${mixColor})`
		})
	}

	// Listen for changes to the base color
	const observer = new MutationObserver(updateColorScale)
	observer.observe(document.documentElement, {
		attributes: true,
		attributeFilter: ['style'],
	})

	// Initial update
	updateColorScale()
</script>

<style>
	:root {
		--base-color: #3b82f6;
	}
</style>
