---
const shades = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900]
---

<div class='grid grid-cols-1 sm:grid-cols-5 md:grid-cols-10 gap-4'>
	{
		shades.map((shade) => (
			<div class='flex flex-col items-center gap-2'>
				<div
					class='w-full h-20 rounded color-scale-item border-2 border-slate-600'
					data-shade={shade}
				/>
				<span class='text-md'>{shade}</span>
				<span class='text-lg hex-code' />
			</div>
		))
	}
</div>

<script>
	function calculateMixPercentage(shade: number): number {
		if (shade <= 500) {
			return 90 - ((shade - 50) / 450) * 90
		} else {
			return ((shade - 500) / 400) * 40
		}
	}

	function hexToRgb(hex: string): [number, number, number] {
		const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex)
		return result
			? [
					parseInt(result[1], 16),
					parseInt(result[2], 16),
					parseInt(result[3], 16),
				]
			: [0, 0, 0]
	}

	function rgbToHex(r: number, g: number, b: number): string {
		return (
			'#' +
			[r, g, b]
				.map((x) => {
					const hex = Math.round(x).toString(16)
					return hex.length === 1 ? '0' + hex : hex
				})
				.join('')
				.toUpperCase()
		)
	}

	function mixColors(
		color1: [number, number, number],
		color2: [number, number, number],
		weight: number
	): [number, number, number] {
		return color1.map((c, i) =>
			Math.round(c * (1 - weight) + color2[i] * weight)
		) as [number, number, number]
	}

	function updateColorScale() {
		const baseColor = getComputedStyle(document.documentElement)
			.getPropertyValue('--base-color')
			.trim()
		const baseRgb = hexToRgb(baseColor)
		const items = document.querySelectorAll('.color-scale-item')

		items.forEach((item) => {
			const shade = parseInt(item.getAttribute('data-shade') || '500')
			const mixPercentage = calculateMixPercentage(shade) / 100
			const mixColor: [number, number, number] =
				shade < 500 ? [255, 255, 255] : [0, 0, 0]

			const mixedRgb = mixColors(baseRgb, mixColor, mixPercentage)
			const hexCode = rgbToHex(...mixedRgb)

			;(item as HTMLElement).style.backgroundColor = hexCode

			// Update the hex code display
			const hexSpan = item.parentElement!.querySelector('.hex-code')
			if (hexSpan) {
				hexSpan.textContent = hexCode
			}
		})
	}

	// Listen for changes to the base color
	const observer = new MutationObserver(updateColorScale)
	observer.observe(document.documentElement, {
		attributes: true,
		attributeFilter: ['style'],
	})

	// Initial update
	updateColorScale()
</script>

<style>
	:root {
		--base-color: #3b82f6;
	}
</style>
